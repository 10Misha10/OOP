#include <iostream>

using namespace std;

template <class T>
class Array
{
	T *arr;
	int size;
public:
	
	void  View() 
	{
		for(int i = 0; i < this->size; i++)
		{
			cout << arr[i] << " ";
		}
		cout << endl;
	}
	Array(T value)
	{
		this->size = value;
		arr = new T[size];
		for (int i = 0; i < this->size; i++)
		{
			if (typeid(T) == typeid(int)) 
			{
				arr[i] = value * i;
			}
			if (typeid(T) == typeid(double))
			{
				arr[i] = value * 1.5 * i;
			}
		}
	}
	void run() 
	{
		if (typeid(T) == typeid(int))
		{
			int sum = 0;
			for (int i = 0; i < this->size; i++)
			{
				sum += arr[i];
			}
			int res = sum / this->size;
			cout << "average value: " << res << endl;
		}
		if (typeid(T) == typeid(double))
		{
			double sum = 0;
			for (int i = 0; i < this->size; i++)
			{
				sum += arr[i];
			}
			cout << "Sum: " << sum << endl;
		}
	}
};
template <>
class Array <char>
{
	char* arr;
	int size;
public:
	void View()
	{
		for (int i = 0; i < this->size; i++)
		{
			cout << arr[i] << " ";
		}
		cout << endl;
	}
	Array(string str)
	{
		this->size = str.size();
		arr = new char[str.size()];
		//strcpy_s(arr, 10, value);
		for (int i = 0; i < this->size; i++)
		{
			arr[i] = str[i];
		}
	}
	void run()
	{
		cout << "first and last: " << this->arr[0] << "\t" << this->arr[this->size-1] << endl;
	}
};


int main()
{
	Array<int> int_arr(10);
	int_arr.View();
	int_arr.run();
	cout << endl;

	Array<double> double_arr(11);
	double_arr.View();
	double_arr.run();
	cout << endl;

	Array<char> char_arr("ffffffff1");
	char_arr.View();
	char_arr.run();
}
